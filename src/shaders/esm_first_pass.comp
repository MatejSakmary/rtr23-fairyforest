#version 450
#extension GL_GOOGLE_include_directive : require
#include "src/shared/shared.inl"

layout(push_constant, scalar) uniform push {ESMShadowPC pc;};

// Because I do a 5 wide blur I need 4 extra values so I cover the edges
shared f32 depth_lds [ESM_BLUR_WORKGROUP_SIZE + 4];
f32 get_depth(i32 loacal_thread_index, i32 offset)
{
    const i32 index = loacal_thread_index + offset + 2;
    return depth_lds[index];
}

layout(local_size_x = ESM_BLUR_WORKGROUP_SIZE) in;
void main()
{
    const f32 weights[] = f32[3](0.375, 0.25, 0.0625);

    const u32vec2 wg_image_coords = { gl_WorkGroupID.x * ESM_BLUR_WORKGROUP_SIZE, gl_WorkGroupID.y};
    const u32vec2 image_coords = { wg_image_coords.x + gl_LocalInvocationIndex, wg_image_coords.y };

    for(i32 wg_offset = 0; wg_offset < 2 * ESM_BLUR_WORKGROUP_SIZE; wg_offset += ESM_BLUR_WORKGROUP_SIZE)
    {
        // I offset the local thread x coord by two which is the overhang I need for 5 wide gaussian
        const u32 thread_x_image_coord = wg_image_coords.x + wg_offset + gl_LocalInvocationIndex - 2;
        const u32 clamped_thread_x_image_coord = clamp(thread_x_image_coord, 0, SHADOWMAP_RESOLUTION);

        // offset the position in image by the cascade - The cascades are rendered into a single
        // depth image where each cascade has it's own viewport
        const u32 cascade_offset_clamped_x_image_coord = clamped_thread_x_image_coord + pc.offset.x;
        const u32 cascade_offset_y_image_coord = wg_image_coords.y + pc.offset.y;

        if(gl_LocalInvocationIndex + wg_offset < ESM_BLUR_WORKGROUP_SIZE + 4)
        {
            const f32 d0 = texelFetch(
                texture2DTable[pc.shadowmap_index],
                i32vec2(cascade_offset_clamped_x_image_coord, cascade_offset_y_image_coord),
                0).r;
            depth_lds[gl_LocalInvocationIndex + wg_offset] = d0;
        }
        memoryBarrierShared();
        barrier();

        // https://www.advances.realtimerendering.com/s2009/SIGGRAPH%202009%20-%20Lighting%20Research%20at%20Bungie.pdf
        // slide 54
        const f32 d0 = get_depth(i32(gl_LocalInvocationIndex), 0);
        const f32 sum = weights[2] * exp(ESM_FACTOR * (get_depth(i32(gl_LocalInvocationIndex), -2) - d0)) + 
                        weights[1] * exp(ESM_FACTOR * (get_depth(i32(gl_LocalInvocationIndex), -1) - d0)) +
                        weights[0] + 
                        weights[1] * exp(ESM_FACTOR * (get_depth(i32(gl_LocalInvocationIndex),  1) - d0)) +
                        weights[2] * exp(ESM_FACTOR * (get_depth(i32(gl_LocalInvocationIndex),  2) - d0)); 

        const f32 esm_result = d0 + log(sum) / ESM_FACTOR;

        imageStore(image2DArrayTable[pc.tmp_esm_index], i32vec3(image_coords, pc.cascade_index), f32vec4(esm_result));
    }
}