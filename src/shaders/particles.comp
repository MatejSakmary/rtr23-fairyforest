#version 450
#extension GL_GOOGLE_include_directive : require
#include "src/shared/particles.inl"

layout(local_size_x = PARTICLES_X_TILE_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(push_constant, scalar) uniform pc {ParticlesPC data;};

layout(buffer_reference, scalar, buffer_reference_align = 4) buffer Part {f32vec3 pos; f32vec3 vel; float ttl;};
layout(buffer_reference, scalar, buffer_reference_align = 4) buffer Counter {i32 count;};
layout(buffer_reference, scalar, buffer_reference_align = 4) buffer LastCount {i32 count;};

f32 delta_t = 0.016666f; // TODO(lgress) : Get the real delta time

void addParticleToOutputList(f32vec3 pos, f32vec3 vel, f32 ttl) {
    // Increment atomic counter, test if we are out of memory
    uint nr = (Counter(data.atomic_count)[0]).count;
    (Counter(data.atomic_count)[0]).count = (Counter(data.atomic_count)[0]).count+1;
    if (nr >= PARTICLES_COUNT) {
        (Counter(data.atomic_count)[0]).count--;
        return;
    }

    (Part(data.particles_out)[nr]).pos = pos;
    (Part(data.particles_out)[nr]).vel = vel;
    (Part(data.particles_out)[nr]).ttl = ttl;

    // Not 100% sure yet what is variable is supposed to get
    (Counter(data.last_count)[0]).count = (Counter(data.atomic_count)[0]).count;
}

void main() {
    uint index = gl_GlobalInvocationID.x; 
    (Part(data.particles_in)[index]).pos = vec3(5.f, 5.f, 5.f); // Should be initialized somewhere else

    //if (index >= (LastCount(data.last_count)[0]).count) {
    //    return;
    //}

    f32vec3 forces = vec3(-2.f, 0.f, 0.f); // TODO(lgress) : find a way to make nice random movement (Brownian?)

    f32vec3 velocity = (Part(data.particles_in)[index]).vel + delta_t * forces;
    f32vec3 position = (Part(data.particles_in)[index]).pos + delta_t * velocity;
    f32 ttl = 1.f;
    addParticleToOutputList(position, velocity, ttl);
    
    
    // f32 ttl = (Part(data.particles_in)[index]).ttl - delta_t;
    // if (ttl >= 0) {
    //     (Part(data.particles_in)[index]).pos = vec3(2.f, 2.f, 2.f);
    //     addParticleToOutputList(position, velocity, ttl);
    // }
}
