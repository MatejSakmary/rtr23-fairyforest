#version 450
#extension GL_GOOGLE_include_directive : require
#include "src/shared/shared.inl"

layout(push_constant, scalar) uniform push {AnalyzeDepthPC pc;};

// If subgroup size is less than 32 this will be too small (32 here represents subgroup size)
// TODO(msakmary) perhaps use specialization constants for this
shared f32vec2 min_max_depth[DEPTH_PASS_TILE_SIZE * DEPTH_PASS_TILE_SIZE / 32];
#// Calculate the min/max depth values for the entire workgroup and store them in the global buffer
void workgroup_min_max_depth(f32vec2 thread_min_max_depth)
{
    f32 min_depth = subgroupMin(thread_min_max_depth.x);
    f32 max_depth = subgroupMax(thread_min_max_depth.y);

    if(subgroupElect()) { min_max_depth[gl_SubgroupID] = f32vec2(min_depth, max_depth); }
    memoryBarrierShared();
    barrier();

    // only the first subgroup will now read the values from shared memory and again do subgroup min
    if(gl_SubgroupID == 0) 
    {
        // cutoff in case warp is bigger than 32 threads
        u32 cutoff = DEPTH_PASS_TILE_SIZE * DEPTH_PASS_TILE_SIZE / gl_SubgroupSize;
        if(gl_SubgroupInvocationID < cutoff) 
        { 
            f32vec2 min_max_depth_value = min_max_depth[gl_SubgroupInvocationID];
            min_depth = subgroupMin(min_max_depth_value.x);
            max_depth = subgroupMax(min_max_depth_value.y);

            u32 global_array_index = gl_WorkGroupID.y * gl_NumWorkGroups.x + gl_WorkGroupID.x;

            // only the 0th thread in 0th warp writes out the min for the entire workgroup
            if(subgroupElect()) 
            {
                (DepthLimits(pc.depth_limits)[global_array_index]).limits = f32vec2(min_depth, max_depth);
            }
        }
    }
}

// min/max depth values for the local thread
f32vec2 thread_min_max_depth(f32vec4 read_depth_values)
{
    f32 thread_min_depth_value = 0.0;
    f32 thread_max_depth_value = 0.0;

    thread_max_depth_value = max(
        max(read_depth_values.x, read_depth_values.y),
        max(read_depth_values.z, read_depth_values.w)
    );

    read_depth_values.x = read_depth_values.x == 0.0 ? 42.0 : read_depth_values.x;
    read_depth_values.y = read_depth_values.y == 0.0 ? 42.0 : read_depth_values.y;
    read_depth_values.z = read_depth_values.z == 0.0 ? 42.0 : read_depth_values.z;
    read_depth_values.w = read_depth_values.w == 0.0 ? 42.0 : read_depth_values.w;

    thread_min_depth_value = min(
        min(read_depth_values.x, read_depth_values.y),
        min(read_depth_values.z, read_depth_values.w)
    );
    return f32vec2(thread_min_depth_value, thread_max_depth_value);
}

layout(local_size_x = DEPTH_PASS_TILE_SIZE, local_size_y = DEPTH_PASS_TILE_SIZE, local_size_z = 1) in;
void main()
{
    // ========================== FIRST PASS =====================================
    //        Writes out min/max value per Workgroup into the global memory
    u32vec2 subgroup_offset;
    subgroup_offset.x = 0;
    subgroup_offset.y = (gl_SubgroupID * gl_SubgroupSize) / DEPTH_PASS_TILE_SIZE;

    u32vec2 in_subgroup_offset;
    in_subgroup_offset.x = gl_SubgroupInvocationID % DEPTH_PASS_TILE_SIZE;
    in_subgroup_offset.y = gl_SubgroupInvocationID / DEPTH_PASS_TILE_SIZE;

    const u32vec2 pixel_coords = DEPTH_PASS_TILE_SIZE * gl_WorkGroupID.xy + subgroup_offset + in_subgroup_offset;
    // Each thread reads 2x2 block
    const u32vec2 scaled_pixel_coords = pixel_coords * DEPTH_PASS_THREAD_READ_COUNT;
    // Offset into the middle of the 2x2 block so gather gets us the correct texels
    const u32vec2 scaled_offset_pixel_coords = scaled_pixel_coords + u32vec2(1, 1);

    f32vec2 depth_uv = f32vec2(scaled_offset_pixel_coords) / f32vec2(pc.depth_dimensions);
    f32vec4 read_depth_values = textureGather(sampler2D(texture2DTable[pc.depth_index], samplerTable[pc.sampler_id]), depth_uv, 0);

    f32vec2 local_min_max_depth = thread_min_max_depth(read_depth_values);
    workgroup_min_max_depth(local_min_max_depth);
}